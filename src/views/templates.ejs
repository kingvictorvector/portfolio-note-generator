<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Template Editor</title>
    <link rel="stylesheet" href="/css/bootstrap.min.css">
    <style>
        .template-editor {
            min-height: 400px;
            font-family: monospace;
            font-size: 14px;
        }
        .variable-list {
            max-height: 300px;
            overflow-y: auto;
        }
        .variable-item {
            cursor: pointer;
            padding: 8px;
            border: 1px solid #dee2e6;
            margin: 3px 0;
            border-radius: 4px;
            background-color: #f8f9fa;
            transition: background-color 0.2s;
        }
        .variable-item:hover {
            background-color: #e9ecef;
        }
        .preview-section {
            background-color: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 5px;
            padding: 15px;
            margin-top: 20px;
        }
    </style>
</head>
<body>
    <div class="container mt-4">
        <div class="row">
            <div class="col-12">
                <h2>Note Template Editor</h2>
                <p>Customize your note template with variables. Click on variables to insert them into your template.</p>
                <a href="/upload" class="btn btn-secondary mb-3">Back to Upload</a>
            </div>
        </div>

        <div class="row">
            <!-- Template Editor -->
            <div class="col-md-8">
                <div class="card">
                    <div class="card-header">
                        <h5>Edit Template</h5>
                    </div>
                    <div class="card-body">
                        <form id="templateForm">
                            <div class="mb-3">
                                <label for="templateContent" class="form-label">Template Content</label>
                                <textarea class="form-control template-editor" id="templateContent" name="templateContent" rows="20" placeholder="Enter your template here. Use variables like {{clientName}}, {{usStockPercentage}}, etc."><%= currentTemplate %></textarea>
                                <div class="form-text">Use double curly braces for variables: {{variableName}}</div>
                            </div>
                            <button type="submit" class="btn btn-primary">Save Template</button>
                            <button type="button" class="btn btn-outline-secondary" onclick="resetToDefault()">Reset to Default</button>
                        </form>
                    </div>
                </div>

                <!-- Preview Section -->
                <div class="preview-section">
                    <h6>Template Preview (with sample data)</h6>
                    <div id="previewContent" style="white-space: pre-wrap; font-family: monospace; background: white; padding: 10px; border-radius: 3px;"></div>
                </div>
            </div>

            <!-- Variable Reference -->
            <div class="col-md-4">
                <div class="card">
                    <div class="card-header">
                        <h5>Available Variables</h5>
                    </div>
                    <div class="card-body variable-list">
                        <% for (const [category, variables] of Object.entries(availableVariables)) { %>
                            <h6 class="mt-3"><%= category %></h6>
                            <% for (const [variable, description] of Object.entries(variables)) { %>
                                <div class="variable-item" onclick="insertVariable('{{<%= variable %>}}')">
                                    <strong>{{<%= variable %>}}</strong><br>
                                    <small><%= description %></small>
                                </div>
                            <% } %>
                        <% } %>
                    </div>
                </div>

                <!-- Quick Templates -->
                <div class="card mt-3">
                    <div class="card-header">
                        <h5>Quick Templates</h5>
                    </div>
                    <div class="card-body">
                        <% for (const [key, template] of Object.entries(quickTemplates)) { %>
                            <div class="d-flex justify-content-between align-items-center mb-2">
                                <button class="btn btn-outline-primary btn-sm" onclick="loadQuickTemplate('<%= key %>', '<%= template.name %>')"><%= template.name %></button>
                                <div>
                                    <button class="btn btn-outline-warning btn-sm" onclick="editQuickTemplate('<%= key %>', '<%= template.name %>')" title="Edit">
                                        <small>‚úèÔ∏è</small>
                                    </button>
                                    <button class="btn btn-outline-danger btn-sm" onclick="deleteQuickTemplate('<%= key %>', '<%= template.name %>')" title="Delete">
                                        <small>üóëÔ∏è</small>
                                    </button>
                                </div>
                            </div>
                        <% } %>
                        
                        <hr>
                        <h6>Save Current Template</h6>
                        <div class="input-group mb-2">
                            <input type="text" class="form-control form-control-sm" id="saveTemplateName" placeholder="Template name">
                            <input type="hidden" id="currentTemplateKey" value="">
                            <button class="btn btn-outline-success btn-sm" onclick="saveAsQuickTemplate()">Save as Quick Template</button>
                        </div>
                        <small class="text-muted">Leave template name empty to create a new template, or enter an existing name to overwrite it.</small>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        function insertVariable(variable) {
            const textarea = document.getElementById('templateContent');
            const start = textarea.selectionStart;
            const end = textarea.selectionEnd;
            const text = textarea.value;
            
            textarea.value = text.substring(0, start) + variable + text.substring(end);
            textarea.focus();
            textarea.setSelectionRange(start + variable.length, start + variable.length);
            
            // Update preview
            updatePreview();
        }

        function loadQuickTemplate(key, name) {
            fetch(`/api/quick-template/${key}`)
                .then(response => response.json())
                .then(result => {
                    if (result.success) {
                        document.getElementById('templateContent').value = result.template.content;
                        document.getElementById('currentTemplateKey').value = key;
                        document.getElementById('saveTemplateName').value = name;
                        updatePreview();
                    } else {
                        alert('Error loading template: ' + result.error);
                    }
                });
        }

        function editQuickTemplate(key, name) {
            // Same as loadQuickTemplate but explicitly for editing
            loadQuickTemplate(key, name);
        }

        function deleteQuickTemplate(key, name) {
            if (confirm(`Are you sure you want to delete the template "${name}"?`)) {
                fetch(`/api/quick-template/${key}`, { 
                    method: 'DELETE' 
                })
                .then(response => response.json())
                .then(result => {
                    if (result.success) {
                        alert('Template deleted successfully!');
                        location.reload();
                    } else {
                        alert('Error deleting template: ' + result.error);
                    }
                });
            }
        }

        function saveAsQuickTemplate() {
            const templateName = document.getElementById('saveTemplateName').value.trim();
            const templateContent = document.getElementById('templateContent').value.trim();
            
            if (!templateName) {
                alert('Please enter a template name');
                return;
            }
            
            if (!templateContent) {
                alert('Template content cannot be empty');
                return;
            }
            
            const currentTemplateKey = document.getElementById('currentTemplateKey').value;
            
            fetch('/api/quick-template', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    templateName: templateName,
                    templateContent: templateContent,
                    templateKey: currentTemplateKey || undefined
                })
            })
            .then(response => response.json())
            .then(result => {
                if (result.success) {
                    alert('Template saved successfully!');
                    document.getElementById('saveTemplateName').value = '';
                    document.getElementById('currentTemplateKey').value = '';
                    location.reload(); // Reload to show the new template
                } else {
                    alert('Error saving template: ' + result.error);
                }
            });
        }

        function resetToDefault() {
            if (confirm('Reset to default template?')) {
                const defaultTemplate = `Portfolio review for {{clientName}} covering the period {{timePeriod}}.

Asset Allocation:
- US Stock: {{usStockPercentage}}%
- Non US Stock: {{nonUsStockPercentage}}%
- Cash: {{cashPercentage}}%
- Bond: {{bondPercentage}}%
- Other: {{otherPercentage}}%

Performance Summary (Trailing Year):
- Time Weighted Return: {{trailingYearReturn}}%
- Benchmark Return: {{trailingYearBenchmark}}%

Performance Summary (YTD):
- Time Weighted Return: {{ytdReturn}}%
- Benchmark Return: {{ytdBenchmark}}%`;
                
                document.getElementById('templateContent').value = defaultTemplate;
                updatePreview();
            }
        }

        function updatePreview() {
            const template = document.getElementById('templateContent').value;
            const sampleData = {
                '{{clientName}}': 'John Smith',
                '{{timePeriod}}': '1/1/2023 to 12/31/2023',
                '{{usStockPercentage}}': '45.2',
                '{{nonUsStockPercentage}}': '25.8',
                '{{cashPercentage}}': '12.0',
                '{{bondPercentage}}': '15.0',
                '{{otherPercentage}}': '2.0',
                '{{totalEquityPercentage}}': '71.0',
                '{{totalFixedIncomePercentage}}': '27.0',
                '{{trailingYearReturn}}': '8.5',
                '{{trailingYearBenchmark}}': '7.2',
                '{{ytdReturn}}': '6.8',
                '{{ytdBenchmark}}': '5.9'
            };
            
            let preview = template;
            for (const [variable, value] of Object.entries(sampleData)) {
                preview = preview.replace(new RegExp(variable, 'g'), value);
            }
            
            document.getElementById('previewContent').textContent = preview;
        }

        // Update preview when template changes
        document.getElementById('templateContent').addEventListener('input', updatePreview);

        // Initial preview
        updatePreview();

        document.getElementById('templateForm').addEventListener('submit', function(e) {
            e.preventDefault();
            
            const formData = new FormData(this);
            const data = Object.fromEntries(formData);
            
            fetch('/api/template', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(data)
            })
            .then(response => response.json())
            .then(result => {
                if (result.success) {
                    alert('Template saved successfully!');
                } else {
                    alert('Error saving template: ' + result.error);
                }
            });
        });
    </script>
</body>
</html> 